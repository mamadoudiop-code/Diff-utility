/*
 * Copyright (C) 2024.
 * All rights reserved.
 *
 * This code is provided as an example and is not supported by SailPoint.
 * It is expected that the user of this code has knowledge of SailPoint IIQ
 * and Java development.
 *
 * Cette version utilise FileWriter pour créer un fichier CSV, sans dépendances externes.
 */

import sailpoint.api.SailPointContext;
import sailpoint.object.TaskResult;
import sailpoint.object.QueryOptions;
import sailpoint.object.Filter;
import sailpoint.object.Custom;
import sailpoint.tools.GeneralException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.stream.Collectors;

// Initialisation du logger
Log log = LogFactory.getLog("rule.TaskReportExporter.CSV");

// Helper method to safely format a string for a CSV file.
// It will enclose the string in double quotes if it contains a comma or a newline.
// It will also escape any existing double quotes inside the string.
public String escapeCsv(Object input) {
    if (input == null) {
        return "";
    }
    String data = String.valueOf(input);
    if (data.contains(",") || data.contains("\"") || data.contains("\n")) {
        data = data.replace("\"", "\"\"");
        return "\"" + data + "\"";
    }
    return data;
}

log.info("Début de la règle d'exportation CSV des tâches et rapports.");

BufferedWriter writer = null;
try {
    // --- ÉTAPE 1: CONFIGURATION ---
    String configObjectName = "Configuration Export Taches Rapports";
    String outputDirectory = "/path/on/sailpoint/server/reports/"; // !! À MODIFIER !!

    Custom config = context.getObjectByName(Custom.class, configObjectName);
    if (config == null) {
        throw new GeneralException("L'objet de configuration '" + configObjectName + "' n'a pas été trouvé.");
    }

    List<String> taskNamesToExport = config.get("taskNames");
    if (taskNamesToExport == null || taskNamesToExport.isEmpty()) {
        log.warn("Aucun nom de tâche/rapport n'est configuré pour l'export. Arrêt de la règle.");
        return;
    }
    
    String configuredPath = config.getString("outputDirectory");
    if (configuredPath != null && !configuredPath.isEmpty()) {
      outputDirectory = configuredPath;
    }

    // --- ÉTAPE 2: CRÉATION DU FICHIER CSV ---
    String fileName = "Export_Resultats_Taches_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".csv";
    String fullPath = outputDirectory + fileName;
    
    writer = new BufferedWriter(new FileWriter(fullPath));
    
    log.info("Création du fichier CSV à l'emplacement : " + fullPath);

    // Définir et écrire les en-têtes de colonnes
    List<String> headers = Arrays.asList(
        "Nom de la Tâche/Rapport", "Statut", "Date de Début",
        "Date de Fin", "Durée (secondes)", "Serveur", "Messages"
    );
    writer.write(String.join(",", headers));
    writer.newLine();

    // --- ÉTAPE 3: RÉCUPÉRATION ET TRAITEMENT DES RÉSULTATS ---
    log.info("Tâches à traiter : " + taskNamesToExport);
    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

    for (String taskName : taskNamesToExport) {
        log.debug("Recherche des résultats pour la tâche : " + taskName);

        QueryOptions qo = new QueryOptions();
        qo.addFilter(Filter.eq("name", taskName));
        qo.addFilter(Filter.isNotNull("completed"));
        qo.setOrderBy("completed");
        qo.setOrderAscending(false);

        Iterator<TaskResult> resultsIterator = context.search(TaskResult.class, qo);
        
        List<String> rowData = new ArrayList<>();
        
        if (resultsIterator.hasNext()) {
            TaskResult result = resultsIterator.next();
            
            rowData.add(escapeCsv(result.getName()));
            rowData.add(escapeCsv(result.getCompletionStatus()));
            rowData.add(escapeCsv(result.getStartDate() != null ? sdf.format(result.getStartDate()) : ""));
            rowData.add(escapeCsv(result.getCompletedDate() != null ? sdf.format(result.getCompletedDate()) : ""));
            
            long duration = 0;
            if (result.getStartDate() != null && result.getCompletedDate() != null) {
                duration = (result.getCompletedDate().getTime() - result.getStartDate().getTime()) / 1000;
            }
            rowData.add(escapeCsv(duration));

            rowData.add(escapeCsv(result.getHost()));
            
            String allMessages = "";
            if (result.getMessages() != null) {
                allMessages = String.join(" | ", result.getMessages());
            }
            rowData.add(escapeCsv(allMessages));
            
        } else {
            log.warn("Aucun résultat trouvé pour la tâche : " + taskName);
            rowData.add(escapeCsv(taskName));
            rowData.add(escapeCsv("Aucun résultat trouvé"));
            // Remplir le reste des colonnes avec des chaînes vides
            for (int i = 0; i < headers.size() - 2; i++) {
                rowData.add("");
            }
        }
        
        writer.write(String.join(",", rowData));
        writer.newLine();
    }

    log.info("Règle d'exportation CSV terminée avec succès.");

} catch (Exception e) {
    log.error("Une erreur est survenue dans la règle d'exportation CSV des tâches.", e);
    throw new GeneralException("Erreur lors de la génération du rapport CSV", e);
} finally {
    // --- ÉTAPE 4: FERMETURE DU FICHIER ---
    if (writer != null) {
        try {
            writer.close();
        } catch (IOException e) {
            log.error("Impossible de fermer le BufferedWriter.", e);
        }
    }
}
