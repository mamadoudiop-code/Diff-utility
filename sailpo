import sailpoint.object.Identity;
import sailpoint.object.Application;
import sailpoint.object.Role;
import sailpoint.object.Policy;
import sailpoint.object.Rule;
import sailpoint.api.SailPointContext;
import sailpoint.tools.GeneralException;
import java.util.Date;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;
import sailpoint.object.QueryOptions;
import sailpoint.object.Filter;

// Pas de signature de méthode explicite ici, les imports et le code viennent directement.

List<String> changedObjectNames = new ArrayList<>();

// 1. Définir les dates de début et de fin
Calendar cal = Calendar.getInstance();
Date endDate = cal.getTime(); // Aujourd'hui

cal.add(Calendar.DAY_OF_MONTH, -1);
Date startDate = cal.getTime(); // Hier

System.out.println("Recherche des objets modifiés entre : " + startDate + " et " + endDate);
// Utilisation de log pour une meilleure journalisation dans les logs SailPoint
log.debug("Recherche des objets modifiés entre : " + startDate + " et " + endDate);


// 2. Interroger les objets (Exemples pour Identity, Application, Role, Policy, Rule)

// a) Identités (Identity)
QueryOptions qoIdentity = new QueryOptions();
qoIdentity.addFilter(Filter.ge("modified", startDate)); // modified >= hier
qoIdentity.addFilter(Filter.le("modified", endDate));   // modified <= aujourd'hui
List<Identity> identities = context.getObjects(Identity.class, qoIdentity);
for (Identity id : identities) {
    changedObjectNames.add("Identity: " + id.getName() + " (Last Modified: " + id.getModified() + ")");
}

// b) Applications (Application)
QueryOptions qoApplication = new QueryOptions();
qoApplication.addFilter(Filter.ge("modified", startDate));
qoApplication.addFilter(Filter.le("modified", endDate));
List<Application> applications = context.getObjects(Application.class, qoApplication);
for (Application app : applications) {
    changedObjectNames.add("Application: " + app.getName() + " (Last Modified: " + app.getModified() + ")");
}

// c) Rôles (Role)
QueryOptions qoRole = new QueryOptions();
qoRole.addFilter(Filter.ge("modified", startDate));
qoRole.addFilter(Filter.le("modified", endDate));
List<Role> roles = context.getObjects(Role.class, qoRole);
for (Role role : roles) {
    changedObjectNames.add("Role: " + role.getName() + " (Last Modified: " + role.getModified() + ")");
}

// d) Politiques (Policy)
QueryOptions qoPolicy = new QueryOptions();
qoPolicy.addFilter(Filter.ge("modified", startDate));
qoPolicy.addFilter(Filter.le("modified", endDate));
List<Policy> policies = context.getObjects(Policy.class, qoPolicy);
for (Policy policy : policies) {
    changedObjectNames.add("Policy: " + policy.getName() + " (Last Modified: " + policy.getModified() + ")");
}

// e) Règles (Rule)
QueryOptions qoRule = new QueryOptions();
qoRule.addFilter(Filter.ge("modified", startDate));
qoRule.addFilter(Filter.le("modified", endDate));
List<Rule> rules = context.getObjects(Rule.class, qoRule);
for (Rule rule : rules) {
    changedObjectNames.add("Rule: " + rule.getName() + " (Last Modified: " + rule.getModified() + ")");
}


System.out.println("Nombre d'objets modifiés trouvés: " + changedObjectNames.size());
log.debug("Nombre d'objets modifiés trouvés: " + changedObjectNames.size());


// La règle retourne la valeur de la dernière expression évaluée, ou une instruction return explicite.
// Dans ce cas, nous voulons retourner la liste des noms d'objets modifiés.
return changedObjectNames;
